九九乘法表
方法不限
for ((i=1;i<10;i++))
do
	line=""
	for ((j=1;j<=i;j++))
	do
		line=$line" $j*$i=$(($i * $j))" 
	done
	echo $line	
done


01 练习：写一个脚本
1、创建目录/tmp/dir-当前日期时间；例如/tmp/dir-20150707-155503。
2、在此目录中创建10个空文件，分别为file1-file10；
#!/bin/bash
basedir=/tmp/dir-`date +%Y%m%d-%H%M%S`
mkdir -p $basedir
for d in {1..10}
do
    touch $basedir/file$d
done



02 练习：写一个脚本
1、创建用户tuser1-tuser9; 
2、创建目录/tmp/dir-当前日期；
3、在/tmp/dir-当前日期 目录中创建9个空文件file101-file109
4、将file101的属主改为tuser1，依次类推，一直将file109的属主改为tuser9;
#!/bin/bash
basedir=/tmp/dir-`date +%Y%m%d`
mkdir -p $basedir
for d in {1..9} ;do
    filename=$basedir/file10$d
    touch $filename
    useradd tuser$d
    chown tuser$d $filename
done




03 练习：写一个脚本，完成以下任务。
添加5个用户，user1-user5，每个用户的密码同用户名
添加密码完成后不显示passwd执行结果
显示添加成功信息
#!/bin/bash
for i in `seq 5`
do
    username=user${i}
    useradd $username
    echo $username | passwd --stdin $username &> /dev/null
    echo "$username created successfully"
done



04 练习：写一个脚本
1、脚本可以接受一个以上的文件路径作为参数；
2、显示每个文件所拥的行数；
#!/bin/bash
for file in $*
do
    lines=`wc -l $file | cut -d' ' -f1`
    echo "$file has $lines lines."
done




05 练习：写一个脚本，不使用awk
显示/etc/passwd文件中位于文件的第偶数行的用户名；并显示共有多少个这样的用户
sed -n 'n;p' /etc/passwd|cut -d: -f1
sed -n 'n;p' /etc/passwd|wc -l

i=$(sed -n '2~2p' /etc/passwd|egrep -o ".*:\b"|cut -d: -f1|wc -l)   可以改进

#!/bin/bash
totalUsers=`wc -l /etc/passwd | cut -d' ' -f1`
for i in `seq 2 2 $totalUsers`; do
    userName=`head -n $i /etc/passwd | tail -1 | cut -d: -f1`
    echo $userName
    echo $userName >> /tmp/count.tmp
done
echo "Total users: `wc -l /tmp/count.tmp | cut -d' ' -f1` ."

awk写法
# awk -F: '{if (NR%2==0) {count++;print $1}} END {print "Total Users:"count" ."}' /etc/passwd

使用算数表达式写法
#!/bin/bash
totalUsers=`wc -l /etc/passwd | cut -d' ' -f1`
count=0
for i in `seq 2 2 $totalUsers`; do
    userName=`head -n $i /etc/passwd | tail -1 | cut -d: -f1`
    echo $userName
    let count=count+1
done
echo "Total users: $count ."

let count+=1
let count++




06 练习:
指定一个用户名,判断此用户的用户名和它的基本组的组名是否相同
#!/bin/bash
if [ $# -ne 1 ] ;then
    echo "agrs error"
    exit 3
fi

if ! id $1 &>/dev/null ;then
        echo "$1 Not Exsits"
        exit 4
fi

username=$1
groupname=`id $username -gn`
if [ "$username" == "$groupname" ]
then
    echo "Same."
else
    echo "Not same."
fi



07 练习：
判断当前主机的CPU生产商，（其信息保存在/proc/cpuinfo文件中）
	如果是：AuthemticAMD,就显示其为AMD公司
	        GenuineIntel,就显示其为 Intel公司
	否则，就显示其为其他公司。
#!/bin/bash
CPU=`egrep "^vendor_id" /proc/cpuinfo | tail -1 | cut -d: -f2`
if [ $CPU == 'GenuineIntel' ] ;then
    echo "Intel"
elif [ $CPU == 'AuthemticAMD' ] ;then
    echo "AMD"
else
    echo "Other"
fi

# awk '/^vendor_id/{if ($3=="AuthemticAMD"){print "AMD";exit;}else if ($3=="GenuineIntel") {print "Intel";exit;} else {print "Other";exit;}}' /proc/cpuinfo


08 练习：
给定三个用户名，将这些用户的帐号信息从/etc/passwd提取出来，然后放入/tmp/test.txt文件中，并在行首给定行号
#!/bin/bash
if [ $# -ne 3 ] ;then
    echo "agrs error"
    exit 3
fi
i=0
for user in $*
do
    let i++
    echo -e "$i\t`grep "^$user:" /etc/passwd`" >> /tmp/test.txt
done

echo -e "$((i++))\t`grep "^$user:" /etc/passwd`" >> /tmp/test.txt

另一种写法
pattern=`echo $* | sed -r 's/ +/:|^/g'`
egrep "^$pattern:" /etc/passwd > /tmp/test.txt
egrep "^a:|^b:|^c:" /etc/passwd > /tmp/test.txt

举例
u1 u2 u3
pattern=`echo $* | sed -r 's/ +/:|^/g'`，被这句替换后是什么？
u1:|^u2:|^u3，这是一个字符串
egrep "^$pattern:" /etc/passwd > /tmp/test.txt，这一句之后，变成egrep "^u1:|^u2:|^u3:" /etc/passwd > /tmp/test.txt



09 练习：
依次向/etc/passwd中的每个用户问好：hello 用户名，并显示用户的shell：
Hello  ，root  ，your shell ：/bin/bash
# awk -F':' '{print "hello,",$1,"  your shell :",$7}' /etc/passwd
只向默认shell为bash的用户问好
# awk -F':' '$7~/\/bin\/bash/{print "hello,",$1,"  your shell :",$7}' /etc/passwd
# awk -F':' '{if ($7=="/bin/bash") print "hello,",$1,"  your shell :",$7}' /etc/passwd

10、取本机IP地址

# ifconfig eth0 | grep "inet addr" | awk '{print $2}' | cut -d: -f2
# ifconfig eth0 | egrep -o 'addr:[0-9\.]+' | cut -d: -f2
# ifconfig eth0 | egrep -o '[0-9\.]{7,}' | head -n1
# ifconfig eth0 | awk -F'[: ]+' '/inet addr/{print $4}'
# ifconfig eth0 | awk -F'[[:space:]:]+' '/inet addr/{print $4}'


ifconfig  | sed -r '2!d;s/^.*(inet[[:space:]]|addr:)//;s@ .*@@'

=========================================================
练习：
11、判断命令历史记录中历史命令的总条目大于500，如果大于，则显示“Some command is done.”,否则显示：“OR”。

12、计算100以内所有能被3整除的整数的和
echo  {3..100..3}

#!/bin/bash
#
SUM=0
for i in `seq 3 3 100`
do
    let SUM+=$i
done
echo "sum: $SUM"
1683



13、使用echo输出10个随机数，并且一行显示。提示：$RANDOM

14、传给脚本一个参数：目录，输出该目录中文件最大的，文件名和文件大小：
比如：1.txt  100KB

awk扩展，内置函数
函数名 格式 说明 
length length([arg]) 返回参数的长度。如果参数没有给出，将默认使用$0。如果参数是个数组名，返回数组长度（见文本综合示例） 
substr substr(string,begin[,length]) 返回从指定位置开始的子串。如果不给出长度，默认取到字符结束。开始位置必须从1开始 
tolower tolower(string) 转换为小写 
toupper toupper(string) 转换为大写 
split split(string, array [, sep]) 以指定的分隔符（默认为FS）分隔字符串并保存在索引从1开始的数组中，并返回元素的个数。(综合示例中有例子) 
mktime mktime(datespec) 返回指定时间的时间戳 
strftime strftime([format [, timestamp[, utc-flag]]]) 格式化时间戳 
systime systime() 返回时间戳 
match(string, regexp [, array]) 使用正则表达式匹配。正则使用/.../，字符串使用"..."



15、传给脚本一个参数：查看该目录下是否有大小为0的文件，如果有则删除。同时显示删除信息。



16、查询当前192.168.1.x网段内，那些IP被使用了，输出这些IP到一个文件中。
#!/bin/bash
#
for i in {1..254}
do
IP=192.168.1.$i
if ping -w 1 -q $IP  ;then
    echo $IP >> /tmp/ips.txt
fi
done

17、请根据一个关键字，杀掉系统进程中包含此关键字的进程。

18、给出一个用户，如果用户不存在，添加用户并显示添加成功，否则显示其已存在

19、如果/etc/inittab文件的行数大于50，就显示大的文件；否则显示小文件

20、添加3个用户user1、user2、user3，并且设置密码和用户名相同，如果用户已经存在，显示：已存在

21、给定一个用户，如果其UID=0，就显示其为管理员，否则显示其为普通用户

22、给定4个整数，判断其中的最大值和最小数。并显示出来
#!/bin/bash
if [ $# -ne 4 ] ;then
    echo "agrs error"
    exit 4
fi
3  2 1
max=$1
min=$1
shift

for i in {2..4} ;do
    if [[ "$1" =~ ^[0-9]+$ ]] ;then
        if [ $max -lt $1 ] ;then
            max=$1
        fi
        if [ $min -gt $1 ] ;then
            min=$1
    	fi
    else
        echo "$1 Not a number."
    	exit 100
    fi
    shift 
done

echo "Max: $max"
echo "Min: $min"



23、练习：
使用一个变量保存一个用户名
如果用户不存在显示不存在信息
如果存在，删除此变量中的用户，且一并删除其家目录，显示“用户删除成功”信息


24、练习：
给定一个用户，获取其密码警告期限，然后判断用户密码使用期限是否已经小于警告期限，如果小于，则是显示"WARN"，否则显示密码还有多少天到期。


25、练习
tomcat的配置文件,conf/server.xml文件中默认端口是8080，修改为80

26、判断一个web服务器的情况
curl -I http://127.0.0.1

=====================================
转置矩阵，方阵
1 2 3        1 4 7
4 5 6    ==》2 5 8
7 8 9        3 6 9

arr=([00]=1 [01]=2 [02]=3 [10]=4 [11]=5 [12]=6 [20]=7 [21]=8 [22]=9)
echo ${arr[*]}
size=3
for ((i=0;i<size;i++))
do
	for ((j=0;j<i;j++))
	do
		if [ $i -ne $j ] ;then
			temp=${arr[$i$j]}
			arr[$i$j]=${arr[$j$i]}
			arr[$j$i]=$temp
		fi
	done
done
echo ${arr[*]}


1 2 3 4 5 6 7 8 9
1 4 7 2 5 8 3 6 9



======awk grep================
将下面链接的最后的文件名取出来，链接如下
ftp://ftp.astron.com/pub/file/file-5.14.tar.gz
ftp://ftp.gmplib.org/pub/gmp-5.1.2/gmp-5.1.2.tar.xz
ftp://ftp.vim.org/pub/vim/unix/vim-7.3.tar.bz2
http://anduin.linuxfromscratch.org/sources/LFS/lfs-packages/conglomeration//iana-etc/iana-etc-2.30.tar.bz2
http://anduin.linuxfromscratch.org/sources/other/udev-lfs-205-1.tar.bz2
http://download.savannah.gnu.org/releases/libpipeline/libpipeline-1.2.4.tar.gz
http://download.savannah.gnu.org/releases/man-db/man-db-2.6.5.tar.xz
http://download.savannah.gnu.org/releases/sysvinit/sysvinit-2.88dsf.tar.bz2
http://ftp.altlinux.org/pub/people/legion/kbd/kbd-1.15.5.tar.gz
http://mirror.hust.edu.cn/gnu/autoconf/autoconf-2.69.tar.xz
http://mirror.hust.edu.cn/gnu/automake/automake-1.14.tar.xz
方法不限


==========================================
Here Document
写个脚本，能在本机安装jdk的rpm，并配置环境变量。
环境变量放在/etc/profile.d/jdk.sh中，内容如下：
export JAVA_HOME=/usr/java/jdk1.7.0_09
export PATH=$PATH:/usr/java/jdk1.7.0_09/bin


# install jdk
DEST_FILE_JDKSH="/etc/profile.d/jdk.sh"
JKD_RPM_FILE="/tmp/jdk-7u9-linux-x64.rpm"
if [ -f $JKD_RPM_FILE ] ;then
	rpm -ivh $JKD_RPM_FILE
	# set environment
    if [ ! -f $DEST_FILE_JDKSH ] ;then
	echo "Create $DEST_FILE_JDKSH"
	JAVA_HOME__=/usr/java/jdk1.7.0_09
	OLD_PATH='$PATH'
cat << EOF > $DEST_FILE_JDKSH
export JAVA_HOME=$JAVA_HOME__
export PATH=$OLD_PATH:$JAVA_HOME__/bin
EOF
	else
		echo "$DEST_FILE_JDKSH exists. "
	fi
else
    echo -e "\e[1;33mJDK NOT FOUND!!$JKD_RPM_FILE!\e[0m "
fi


==========================================
百度云网页分析
要求提取出所有MP4的文件名称，例如 4. 为文件选择器设定扩展名过滤.mp4。

就一行，怎么提取MP4文件名？
<a href="javascript:void(0);" class="vupvr2W" title="4. 为文件选择器设定扩展名过滤.mp4">4. 为文件选择器设定扩展名过滤.mp4</a>

1、直接取
[^><]+?mp4<
>[^><]+?mp4
>[^><]+?mp4<
以上三条的意思，找到mp4特征字符，前面有>，后面有<，通过观察发现字符中没有尖括号，如果有再考虑。
那么mp4前面的字符可能是任意字符但不是尖括号，那么可以写为[^<>]+，扩展表达式不用转移尖括号。
但是问题是默认是贪婪的，它会把这一行尽可能的取很长，为了防止这种问题，可以用非贪婪模式[^<>]+?
但是本题由于限定了字符不是尖括号，所以正则表达式贪婪不起来了。所以，下面的语句
# egrep -o '[^><]+mp4<' baiduyun.txt | cut -d'<' -f1
2、awk的分隔符
awk版本
定义分隔符，再匹配含有mp4的行
# awk -F'<a[^>]+>|</a>' '{for(i=1;i<=NF;i++){if(match($i,"mp4"))print $i}}' baiduyun.txt



================================================
项目
使用shell脚本，获取web服务器的健康状况并存储。





